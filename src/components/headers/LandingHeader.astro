---
interface Props{
    midNav:{
        text:string;
        href:string;
        target?:string;
    }[];
    rightNav:{
        text:string;
        href:string;
        target?:string;
    }[];

}

const {midNav,rightNav} = Astro.props;
---
<header
  id="landing-header"
  class="z-40 py-2 px-10 flex items-center fixed top-0 justify-between w-full transition-colors ease-in duration-300 "
>
  <div class="flex flex-grow basis-0">
    <img
            class="h-8 w-8"
            src="https://tailwindui.com/img/logos/mark.svg?color=white"
            alt="Your Company"
          />
  </div>

  <nav>
    <ul
      class="flex text-sm font-medium [&>li>a]:text-current [&>li>a]:inline-block [&>li>a]:px-4 [&>li>a]:py-2"
    >
    {midNav.map((item)=>{
        return <li><a href={item.href} target={item.target ? item.target : "_self"}>{item.text}</a></li>
    })}
    </ul>
  </nav>

  <nav class="flex flex-grow justify-end basis-0">
    <ul
      class="flex text-sm font-semibold [&>li>a]:text-current [&>li>a]:inline-block [&>li>a]:px-1 [&>li>a]:py-2"
    >
      <li>
        <a  href={rightNav[0].href} target={rightNav[0].target ? rightNav[0].target : "_self"}
          ><svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path
            d="M14.058 3.41c-1.807 .767 -2.995 2.453 -3.056 4.38l-.002 .182l-.243 -.023c-2.392 -.269 -4.498 -1.512 -5.944 -3.531a1 1 0 0 0 -1.685 .092l-.097 .186l-.049 .099c-.719 1.485 -1.19 3.29 -1.017 5.203l.03 .273c.283 2.263 1.5 4.215 3.779 5.679l.173 .107l-.081 .043c-1.315 .663 -2.518 .952 -3.827 .9c-1.056 -.04 -1.446 1.372 -.518 1.878c3.598 1.961 7.461 2.566 10.792 1.6c4.06 -1.18 7.152 -4.223 8.335 -8.433l.127 -.495c.238 -.993 .372 -2.006 .401 -3.024l.003 -.332l.393 -.779l.44 -.862l.214 -.434l.118 -.247c.265 -.565 .456 -1.033 .574 -1.43l.014 -.056l.008 -.018c.22 -.593 -.166 -1.358 -.941 -1.358l-.122 .007a.997 .997 0 0 0 -.231 .057l-.086 .038a7.46 7.46 0 0 1 -.88 .36l-.356 .115l-.271 .08l-.772 .214c-1.336 -1.118 -3.144 -1.254 -5.012 -.554l-.211 .084z"
            stroke-width="0"
            fill="currentColor"></path>
        </svg></a
        >
      </li>
      <li>
        <a href={rightNav[1].href} target={rightNav[1].target ? rightNav[1].target : "_self"}
          ><svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="currentColor"
          fill="none"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
          <path
            d="M18 2a1 1 0 0 1 .993 .883l.007 .117v4a1 1 0 0 1 -.883 .993l-.117 .007h-3v1h3a1 1 0 0 1 .991 1.131l-.02 .112l-1 4a1 1 0 0 1 -.858 .75l-.113 .007h-2v6a1 1 0 0 1 -.883 .993l-.117 .007h-4a1 1 0 0 1 -.993 -.883l-.007 -.117v-6h-2a1 1 0 0 1 -.993 -.883l-.007 -.117v-4a1 1 0 0 1 .883 -.993l.117 -.007h2v-1a6 6 0 0 1 5.775 -5.996l.225 -.004h3z"
            stroke-width="0"
            fill="currentColor"></path>
        </svg></a
        >
      </li>
      <!-- <li>
        <a href=""
          ><svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            stroke-width="2"
            stroke="currentColor"
            fill="none"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"></path>
            <path d="M12 10m-3 0a3 3 0 1 0 6 0a3 3 0 1 0 -6 0"></path>
            <path
              d="M6.168 18.849a4 4 0 0 1 3.832 -2.849h4a4 4 0 0 1 3.834 2.855"
            ></path>
          </svg></a
        >
      </li> -->
    </ul>
  </nav>
</header>

<script>
  const observerOptions = {
    root: null, // defaults to the viewport if not specified or if null
    rootMargin: "0px", //as soon as even one pixel is visible, the callback will be run
    threshold: 0.9, // percentage of visibility the observer looks for
  };

  const header = document.querySelector("#landing-header") as HTMLElement;
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const { isIntersecting } = entry;
      if (isIntersecting) {
        const color = entry.target.getAttribute("data-header-color");
        header.style.color = color as string;
      }
    });
  }, observerOptions);

  const sections = document.querySelectorAll(".landing-section");
  sections.forEach((section) => {
    observer.observe(section);
  });
</script>
